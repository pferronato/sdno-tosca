# Copyright 2016 Huawei Technologies Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###############################################################################
#####                        Overlay IPSEC                                 ####
###############################################################################
tosca_definitions_version: tosca_simple_yaml_1_0
description: creates an Access Network across site and vcpe gateway
imports:
    - tosca_base_type_definition.yaml
    - scripts/sdno_type_definition.yaml

###############################################################################

metadata:
    id: overlay_ipsec
    template_name: virtualCPE_to_vpc
    version: 0.1
    vendor: sdno
    template_author: Pierfranco Ferronato

substitution_mappings:
    node_type: ipsec
            
####################################### TOPOLOGY ##############################
topology_template:
    inputs:
        name:
            type: string
        connectionId:
            type: integer
            description: IPSEC connection ID
        siteCidr:
            type: string
            descrption: enterprise cidr
        dcGWIP:
            type: string
            description: 
        vpcName:
            type: string
            description: mgrIP of thinCPE which access enterprise
        vCPE_MgrIp:
            type: string
            description: mgrIp of vCPE, should be provided by NFVO

    outputs:
        createId:
            type: string
            value: {get_attribute: [ipsec, createId]}
    node_templates:
        vpc_ac:
            type: tosca.nodes.sdno.networkDevice.vpc
            name: vpc_ac
            version: 1.0
            properties:
                vpcName: {get_input: vpcName}
                dcGWIP: {get_input: dcGWIP}
        vCPE_gw:
            type: tosca.nodes.sdno.networkDevice.vCPE
            name: vCPE
            version: 1.0
            properties:
                siteCidr: {get_input: siteCdr}
                mgrIp: {get_input: vCPE_MgrIp}
        ipsec:
            type: tosca.nodes.sdno.networkService
            description: ipsec Access Network
            properties:
                name: {get_input: name}
            attributes:
                connectionId: {get_operation_output: [SELF, tosca.nodes.sdno.lifecycle.ipsec, create, resultResp]}
            interfaces:
                    tosca.nodes.sdno.lifecycle.ipsec:
                        operations:
                            provision:
                                implementation: scripts/rest/ipsec.swagger.jml
                                # inputs: {get_input: vpnConnections}
                            create:
                                inputs: {get_input: vpnConnections}
                            delete:
                                implementation: scripts/rest/ipsec.swagger.jml
                                inputs: {get_input: connectionid}
                            get:
                                implementation: scripts/rest/ipsec.swagger.jml
                                inputs: {get_input: connectionid}
                            terminate:
                                implementation: scripts/rest/ipsec.swagger.jml
                                inputs: {get_input: connectionid}
            requirements:
                dependancy: thinCPE
                dependancy: vCPE_gw

####################################### workflow ##############################
workflows:
    create:
        description: it will create ipsec specified in requests
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [nonsistent]}]
        steps:
            create_ipsec:
                target: ipsec
                activities:
                    - set_state: creating
                    - call_operation: tosca.nodes.sdno.lifecycle.create
                    - set_state: created

    provision:
        description: it will provision ipsec specified in requests
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [created]}]
        steps:
            provision_ipsec:
                target: ipsec
                activities:
                    - set_state: provisioning
                    - call_operation: tosca.nodes.sdno.lifecycle.ipsec.provision
                    - set_state: provisioned
                    
    delete:
        description: Delete a specified ipsec
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [created, provisioned]}]
        steps:
            delete_ipsec:
                target: ipsec
                activities:
                    - set_state: deleting
                    - call_operation: tosca.sdno.node.lifecycle.ipsec.delete
                    - set_state: deleted
                    
    get:
        description: get connections from ipsec
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [provisioned, created]}]
        steps:
            get_ipsec:
                target: ipsec
                activities:
                    - call_operation: tosca.nodes.sdno.lifecycle.ipsec.get
    terminate:
        description:
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [created, provisioned]}]
        steps:
            terminate_ipsec:
                target: ipsec
                activities:
                    - set_state: derminating
                    - call_operation: tosca.nodes.sdno.lifecycle.ipsed.terminate
                    - set_state: terminated

    provisionViaCreated:
        description:
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [nonesistent]}]
        steps:
            create_ipsec:
                target: ipsec
                activities:
                    - inline: create_workflow
                    - inline: provision_workflow
    
    deleteViaTerminated:
        description:
        preconditions:
            - target: ipsec
            condition:
                - assert:
                    - state: [{valid_values: [provisioned]}]
        steps:
            terminate_ipsec:
                target: ipsec
                activities:
                    - inline: terminate_workflow
                    - inline: delete_workflow
            