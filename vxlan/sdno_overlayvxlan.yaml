# Copyright 2016 Huawei Technologies Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
#####                        overlay_vxlan                                 ####
###############################################################################
tosca_definitions_version: tosca_simple_yaml_1_0
description: creates an overlay vxlan from thinCPE to vCPE
imports:
     - types/sdno_type_definition.yaml

###############################################################################

metadata:
    id: overlay_vxlan
    template_name: overlay vxlan from thinCPE to vCPE
    version: 0.1
    vendor: sdno
    template_author: Pierfranco Ferronato

# not supported in aria
# substitution_mappings:
#    node_type: vxlan

####################################### TOPOLOGY ##############################
topology_template:
    inputs:
        name:
            type: string
        connectionId:
            type: integer
            description: VxLAN connection ID
        siteVNI:
            type: integer
            description: VxLAN ID connect site to vCPE
            default: 20001
        siteCidr:
            type: string
            description: enterprise cidr
        siteThinCpeIP:
            type: string
            description: mgrIP of thinCPE which access enterprise
        vCPE_MgrIp:
            type: string
            description: mgrIp of vCPE, should be provided by NFVO
        siteAccessPortVlan:
            type: string
            description: thinCPE port which connect to enterprise
            default: GO/0/1.101

    outputs:
        connectionId:
            type: integer
            value: {get_attribute: [vxlan, connectionId]}

    node_templates:
        thinCPE:
            type: tosca.nodes.sdno.networkDevice.thinCPE
            properties:
                portvlan: {get_input: siteAccessPortVlan}
                siteCidr: {get_input: siteCidr}
                siteThinCpeIP: {get_input: siteThinCpeIP}
        vCPE_gw:
            type: tosca.nodes.sdno.networkDevice.vCPE
            properties:
                siteCidr: {get_input: siteCidr}
                mgrIp: {get_input: vCPE_MgrIp}
        vxlan:
            type: tosca.nodes.sdno.networkService.vxlan
            description: VxLAN Access Network
            properties:
                name: {get_input: name}
                siteVNI: {get_input: siteVNI}
            attributes:
                connectionId: {get_output: [SELF, tosca.nodes.sdno.lifecycle.vxlan, create, connectionId]}
            interfaces:
                    tosca.nodes.sdno.lifecycle.vxlan:
                        operations:
                            provision:
                                implementation: scripts/rest/vxlan.swagger.jml
                                # inputs: {get_input: vpnConnections}
                            create:
                                inputs: {get_input: vpnConnections}
                            delete:
                                implementation: scripts/rest/vxlan.swagger.jml
                                inputs: {get_input: connectionid}
                            get:
                                implementation: scripts/rest/vxlan.swagger.jml
                                inputs: {get_input: connectionid}
                            terminate:
                                implementation: scripts/rest/vxlan.swagger.jml
                                input: {get_input: connectionid}
            requirements:
                - dependency: thinCPE
                - dependency: vCPE_gw

####################################### workflows #############################
workflows:
    create:
        description: it will create vxlan specified in requests
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{equal: nonexistent}]
        steps:
            create_vxlan:
                target: vxlan
                activities:
                    - set_state: creating
                    - call_operation: tosca.nodes.sdno.lifecycle.vxlan.create
                    - set_state: created

    provision:
        description: it will provision vxlan specified in requests
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{equal: created}]
        steps:
            provision_vxlan:
                target: vxlan_node
                activities:
                    - set_state: provisioning
                    - call_operation: tosca.nodes.sdno.lifecycle.vxlan.provision
                    - set_state: provisioned

    delete:
        description: Delete a specified vxlan
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{valid_values: [created, provisioned]}]
        steps:
            delete_vxlan:
                target: vxlan
                activities:
                    - set_state: deleting
                    - call_operation: tosca.sdno.node.lifecycle.vxlan.delete
                    - set_state: deleted

    get:
        description: get connections from VxLAN
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{valid_values: [created, provisioned]}]
        steps:
            get_vxlan:
                target: vxlan
                activities:
                    - call_operation: tosca.nodes.sdno.lifecycle.vxlan.get

    terminate:
        description: ert wert wert wer 
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{equal: provisioned}]
        steps:
            terminate_vxlan:
                target: vxlan
                activities:
                    - set_state: derminating
                    - call_operation: tosca.nodes.sdno.lifecycle.vxlan.terminate
                    - set_state: terminated

    provisionViaCreated:
        description:
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{valid_values: [nonesistent]}]
        steps:
            create_vxlan:
                target: vxlan
                activities:
                    - inline: create_workflow
                    - inline: provision_workflow

    deleteViaTerminated:
        description:
        preconditions:
            target: vxlan
            condition:
                - assert:
                    - state: [{valid_values: [provisioned]}]
        steps:
            terminate_vxlan:
                target: vxlan
                activities:
                    - inline: terminate_workflow
                    - inline: delete_workflow
